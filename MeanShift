{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyM/j20FjbPJIzi2siBu0810"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":17,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":265},"id":"wpoucaYjfnnn","executionInfo":{"status":"ok","timestamp":1664242941836,"user_tz":-480,"elapsed":460,"user":{"displayName":"電子工程系第一林姿君","userId":"07939158005780668191"}},"outputId":"baee8d4c-4e83-4fe0-f71d-863b8ef8a1f4"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}],"source":["import numpy as np\n","import matplotlib.pyplot as plt\n","from sklearn.cluster import MeanShift, estimate_bandwidth\n","from sklearn import datasets\n","#create datasets\n","X,y = datasets.make_blobs(n_samples=50, centers=3, n_features=2, random_state= 20, cluster_std = 1)\n","#estimate bandwidth\n","bandwidth = estimate_bandwidth(X, quantile=0.2, n_samples=1000)\n","#Mean Shift method\n","model = MeanShift(bandwidth = bandwidth, bin_seeding = True)\n","model.fit(X)\n","labels = model.fit_predict(X)\n","#results visualization\n","plt.figure()\n","plt.scatter(X[:,0], X[:,1], c = labels)\n","plt.show()"]}]}