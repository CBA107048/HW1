{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyOqhvegMyQ8rJ6n/7xCp0hQ"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"accelerator":"GPU"},"cells":[{"cell_type":"code","execution_count":4,"metadata":{"id":"MFgO5FAtByWM","executionInfo":{"status":"ok","timestamp":1664189263436,"user_tz":-480,"elapsed":323,"user":{"displayName":"電子工程系第一林姿君","userId":"07939158005780668191"}},"colab":{"base_uri":"https://localhost:8080/","height":265},"outputId":"933dd21c-8f69-4144-869d-41e4d84a28d2"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}],"source":["import matplotlib.pyplot as plt\n","from sklearn.datasets import make_blobs\n","\n","n_samples =200\n","blob_centers =([1,1],[3,4],[1,3.3],[3.5,1.8])\n","data, labels= make_blobs(n_samples=n_samples,centers=blob_centers,cluster_std=0.5,random_state=0)\n","colours =(\"green\",\"orange\",\"blue\",\"magenta\")\n","fig,ax=plt.subplots()\n","\n","for n_class in range (len(blob_centers)):\n","  ax.scatter(data[labels==n_class][:,0],\n","             data[labels==n_class][:,1],\n","             c=colours[n_class],\n","             s=30,\n","             label=str(n_class))"]}]}